{"version":3,"sources":["components/InfoBox.js","util.js","components/Map.js","components/Table.js","components/LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","total","active","props","Card","className","onClick","CardContent","Typography","classeName","color","style","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","mapZoom","setMapZoom","lng","mapCenter","setMapCenter","mapCountries","setMapCountries","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1a40b91.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, ...props }) {\n    return (\n        <Card className={`infoBox ${active && \"infoBox--selected\"}`} onClick={props.onClick}>\n            <CardContent>\n\n                <Typography classeName='infoBox__title' color=\"textSecondary\">\n                    {title}\n                </Typography>\n\n\n                <h2 style={{color: \"#485063\"}} classeName='infoBox__cases'>\n                    +{cases}\n                </h2>\n\n                <Typography color=\"textSecondary\" classeName='infoBox__total' >\n                    {total} Total\n                </Typography>\n                \n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import { Circle, Popup } from \"react-leaflet\";\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      multiplier: 500,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      multiplier: 500,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      multiplier: 500,\n    },\n  };\n  \n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    return sortedData.sort((a , b) => a.cases > b.cases ? -1 : 1);\n\n    // sortedData.sort((a, b) => {\n    //     if (a.cases > b.cases) {\n    //         return -1;\n    //     } else {\n    //         return 1;\n    //     }\n    // })\n    // return sortedData;\n}\n\nexport const prettyPrintStat = (stat) => \nstat ? `${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n//drawing circles on map with interactive tooltips\nexport const showDataOnMap =(data, casesType='cases') => \n    data.map((country) => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType.hex]}\n            radius={\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n            }\n        >\n              <Popup>\n                  <div className=\"info-container\">\n                      <div \n                      className=\"info-flag\"\n                      style={{backgroundImage: `url(${country.countryInfo.flag})`}}\n                       />\n                      <div className=\"info-name\">{country.country}</div>\n                      <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                      <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                      <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                  </div>\n              </Popup>\n        </Circle>\n    ))\n\n","import React from \"react\";\nimport './Map.css';\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"../util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer \n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n            \n        </div>\n    );\n}\n\nexport default Map\n","import './Table.css'\nimport numeral from 'numeral'\n\nfunction Table({ countries}) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n  \n  const buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        let newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    };\n    return chartData;\n  };\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n      const fetchData = async () => {\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n      };\n      fetchData();\n    \n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n        {data?.length > 0 && (\n            <Line \n            options={options}    \n            data={{\n                    datasets: [\n                      {\n                        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                        borderColor: \"#CC1034\",\n                        data: data,\n                    },\n                  ],\n                }} \n            />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import { FormControl, Select, MenuItem, CardContent, Card } from '@material-ui/core';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport InfoBox from './components/InfoBox';\nimport Map from './components/Map';\nimport Table from './components/Table';\nimport { prettyPrintStat, sortData } from './util';\nimport LineGraph from './components/LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then (data => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ));\n          const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n        \n      })\n    } \n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value; \n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : \n      `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode)\n        setCountryInfo(data)\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      })\n  }\n\n  return (\n    \n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n        <h1>COVID-19 TRACKER</h1>\n        <FormControl className=\"app__dropdown\">\n          <Select\n            variant=\"outlined\"\n            value={country}\n            onChange={onCountryChange}\n          >\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            {\n              countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))\n            }\n\n          </Select>\n        </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n           active={casesType === 'cases'}\n           onClick={e => setCasesType('cases')}\n           title=\"Coronavirus Cases Today\"\n           cases={prettyPrintStat(countryInfo.todayCases)}\n           total={prettyPrintStat(countryInfo.cases)} />\n          <InfoBox\n           active={casesType === 'recovered'}\n           onClick={e => setCasesType('recovered')}\n           title=\"Recovered Today\"\n           cases={prettyPrintStat(countryInfo.todayRecovered)}\n           total={prettyPrintStat(countryInfo.recovered)} />\n          <InfoBox\n           active={casesType === 'deaths'}\n           onClick={e => setCasesType('deaths')}\n           title=\"Deaths Today\"\n           cases={prettyPrintStat(countryInfo.todayDeaths)}\n           total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n        <Map\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n          countries={mapCountries}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType} className=\"app__graph\" />\n        </CardContent>\n\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}